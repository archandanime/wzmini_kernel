name: build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
      - cron:  '0 */12 * * *'

env:
  TAG_NAME: latest

jobs:
  buildroot:
    name: Kernel
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        platform:
          - t20
          - t31
        release:
          - ultimate

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup ccache
        if: github.event_name != 'pull_request'
        uses: actions/cache@v3
        with:
          path: /tmp/ccache
          key: ${{matrix.platform}}_${{matrix.release}}

      - name: Restore ccache
        if: github.event_name == 'pull_request'
        uses: actions/cache/restore@v3
        with:
          path: /tmp/ccache
          key: ${{matrix.platform}}_${{matrix.release}}

      - name: Download OpenIPC source
        run: |
          git clone https://github.com/openipc/firmware
          mv firmware/* .
          mv firmware/.* .
          rm -r firmware

      - name: Download OpenIPC br-cache
        run: |
          make prepare
          git clone https://github.com/openipc/br-cache
          ln -s ${GITHUB_WORKSPACE}/br-cache $(ls -d output/buildroot-*)/dl
          make BOARD=${{matrix.platform}}_${{matrix.release}} br-source

      - name: Compile kernel
        run: |
          mkdir -p /tmp/ccache
          ln -s /tmp/ccache ${HOME}/.ccache
          make BOARD=${{matrix.platform}}_ultimate_defconfig br-linux
          
          BUILD_TIMESTAMP=$(date +%Y-%m-%d)
          KERNEL=${GITHUB_WORKSPACE}/output/images/wzmini_${{matrix.platform}}_kernel.bin.${BUILD_TIMESTAMP}
          mv ${GITHUB_WORKSPACE}/output/images/uImage ${KERNEL}
          
          echo KERNEL=${KERNEL} >> ${GITHUB_ENV}
          echo TAG_NAME=${BUILD_TIMESTAMP} >> ${GITHUB_ENV}

      - name: Create release
        if: github.event_name != 'pull_request' && matrix.custom != 'onlyci'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{env.TAG_NAME}}
          files: |
            ${{env.KERNEL}}
